package com.laroccasimone.ProgettoBD.Model.Malware;

import com.mongodb.client.*;
import com.mongodb.client.model.*;
import com.mongodb.client.result.InsertOneResult;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class MalwareDAO {
    private final MongoClient mongoClient;
    private final MongoDatabase database;
    private final MongoCollection<Document> malwareCollection;
    private final MongoCollection<Document> cveCollection;

    public MalwareDAO() {
        System.out.println("Inizio connessione ...");
        // Descrizione della connection string:
        //  localhost:27017,localhost:27018,localhost:27019: lista dei nodi del replica set,
        //  replicaSet=rs0: indica il nome del replica set,
        //  connectTimeoutMS=3000: massimo tempo (in ms) che il client attende per stabilire una connessione,
        //  serverSelectionTimeoutMS=3000: massimo tempo (in ms) per selezionare un nodo disponibile del replica set.
        mongoClient = MongoClients.create("mongodb://localhost:27017,localhost:27018,localhost:27019/?replicaSet=rs0&connectTimeoutMS=3000&serverSelectionTimeoutMS=3000");
        // Connection string alternative:
        // mongoClient = MongoClients.create("mongodb://localhost:27017");
        // mongoClient = MongoClients.create("mongodb://localhost:27017,localhost:27018,localhost:27019/?replicaSet=rs0");
        System.out.println("Connessione stabilita.");
        // Ottieni un riferimento al db cybersecurity
        database = mongoClient.getDatabase("cybersecurity");
        // Recupera le collection malware e cve
        malwareCollection = database.getCollection("malware");
        cveCollection = database.getCollection("cve");
    }

    // CREATE: Aggiungi un nuovo malware
    public void insertMalware(Malware malware) {
        Document document = new Document()
                .append("Start time", malware.getStartTime())
                .append("Last time", malware.getLastTime())
                .append("Attack category", malware.getAttackCategory())
                .append("Attack subcategory", malware.getAttackSubcategory())
                .append("Protocol", malware.getProtocol())
                .append("Source IP", malware.getSourceIP())
                .append("Source Port", malware.getSourcePort())
                .append("Destination IP", malware.getDestinationIP())
                .append("Destination Port", malware.getDestinationPort())
                .append("Attack Name", malware.getAttackName())
                .append("Attack Reference", malware.getAttackReference());

        InsertOneResult result = malwareCollection.insertOne(document);
        System.out.println("Malware inserito con il seguente id: "
                + result.getInsertedId().asObjectId().getValue());
    }

    // READ: Trova malware che sfruttano una specifica CVE (formato standard)
    public List<Document> findMalwareByCVE(String cveId) {
        // Converti "CVE-2007-0015" -> regex "CVE 2007-0015"
        Pattern regex = Pattern.compile("\\b" + cveId.replaceFirst("-", " ") + "\\b", Pattern.CASE_INSENSITIVE);
        Bson filter = Filters.regex("Attack Reference", regex);
        return malwareCollection.find(filter).into(new ArrayList<>());
    }

    // READ: Trova malware che appartengono a una certa categoria
    public List<Document> findMalwareByAttackCategory(String attackCategory) {
        Bson filter = Filters.eq("Attack category", attackCategory);
        return malwareCollection.find(filter).into(new ArrayList<>());
    }

    // UPDATE: Aggiorna un riferimento a una CVE
    public void updateCVEReference(String malwareId, String cveReference) {
        malwareCollection.updateOne(
                Filters.eq("_id", new ObjectId(malwareId)),
                Updates.set("Attack Reference", cveReference)
        );
        System.out.println("CVE aggiornata.");
    }

    // UPDATE: Rimuovi un riferimento a una CVE
    public void removeCVEReference(String malwareId) {
        malwareCollection.updateOne(
                Filters.eq("_id", new ObjectId(malwareId)),
                Updates.unset("Attack Reference")
        );
        System.out.println("CVE rimossa.");
    }

    // DELETE: Elimina un malware per ID (identificatore generato da MongoDB)
    public void deleteMalware(String malwareId) {
        malwareCollection.deleteOne(Filters.eq("_id", new ObjectId(malwareId)));
        System.out.println("Malware eliminato.");
    }

    // Chiudi la connessione
    public void close() {
        mongoClient.close();
    }
}
